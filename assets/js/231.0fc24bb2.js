(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{656:function(v,_,l){"use strict";l.r(_);var i=l(25),t=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h4",{attrs:{id:"单体架构"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#单体架构"}},[v._v("#")]),v._v(" 单体架构")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("将所有功能打包在一个容器中运行的设计风格")])]),v._v(" "),l("li",[l("p",[v._v("一个实例中集成了一个系统的所有功能")])]),v._v(" "),l("li",[l("p",[v._v("通过负载均衡软件/设备实现多实例调用")])]),v._v(" "),l("li",[l("p",[v._v("优点：易开发、易调试、易部署")])]),v._v(" "),l("li",[l("p",[v._v("缺点：可靠性差、不易协同、升级困难")])])]),v._v(" "),l("h4",{attrs:{id:"面向服务的架构-soa"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#面向服务的架构-soa"}},[v._v("#")]),v._v(" 面向服务的架构（SOA）")]),v._v(" "),l("ul",[l("li",[v._v("是一种分布式服务架构")]),v._v(" "),l("li",[v._v("将应用程序的不同服务进行拆分、通过这些服务之间定义明确的借口和协议联系起来")]),v._v(" "),l("li",[v._v("进而实现跨服务/系统交互的能力")]),v._v(" "),l("li",[v._v("优点：松耦合、独立性、可重用")]),v._v(" "),l("li",[v._v("挑战：随着大型互联网公司对大规模弹性部署和敏捷开发的需求，SOA 逐渐难以应付")])]),v._v(" "),l("h4",{attrs:{id:"微服务-microservices"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#微服务-microservices"}},[v._v("#")]),v._v(" 微服务（Microservices）")]),v._v(" "),l("ul",[l("li",[v._v("一种软件架构风格")]),v._v(" "),l("li",[v._v("专注于单一责任与功能的服务为基础，服务之间互相协调配合")]),v._v(" "),l("li",[v._v("每个服务运行在其独立的进程中，服务之间采用轻量级的通信机制互相沟通，能够被独立部署")]),v._v(" "),l("li",[v._v("优点：\n"),l("ul",[l("li",[v._v("服务松耦合、独立开发、独立部署")]),v._v(" "),l("li",[v._v("服务可以用不同语言开发")])])]),v._v(" "),l("li",[v._v("相较于 SOA 的优势\n"),l("ul",[l("li",[v._v("复用率更高")]),v._v(" "),l("li",[v._v("快速响应")]),v._v(" "),l("li",[v._v("弹性扩展")]),v._v(" "),l("li",[v._v("支持异构")])])]),v._v(" "),l("li",[v._v("微服务要解决的问题\n"),l("ul",[l("li",[v._v("服务划分\n"),l("ul",[l("li",[v._v("业务边界清晰")]),v._v(" "),l("li",[v._v("最小化地变更")]),v._v(" "),l("li",[v._v("最大化地复用")])])]),v._v(" "),l("li",[v._v("服务注册与调用")]),v._v(" "),l("li",[v._v("延迟队列")]),v._v(" "),l("li",[v._v("服务熔断处理")]),v._v(" "),l("li",[v._v("缓存设计")]),v._v(" "),l("li",[v._v("分布式事务实现")])])]),v._v(" "),l("li",[v._v("典型代表\n"),l("ul",[l("li",[v._v("Spring Cloud\n"),l("ul",[l("li",[v._v("基于 Spring Boot 实现的服务治理框架")]),v._v(" "),l("li",[v._v("Spring Boot 专注于快速、方便集成的单个个体")]),v._v(" "),l("li",[v._v("Spring Cloud 关注全局服务治理")])])]),v._v(" "),l("li",[v._v("Dubbo\n"),l("ul",[l("li",[v._v("阿里开源的高性能、轻量级分布式RPC框架")]),v._v(" "),l("li",[v._v("面向接口的远程方法调用")]),v._v(" "),l("li",[v._v("智能容错和负载均衡")]),v._v(" "),l("li",[v._v("服务自动注册和发现")])])])])]),v._v(" "),l("li",[v._v("困难\n"),l("ul",[l("li",[v._v("业务架构复杂")]),v._v(" "),l("li",[v._v("服务拆分粒度难以把握")]),v._v(" "),l("li",[v._v("部署维护困难")])])])]),v._v(" "),l("h4",{attrs:{id:"敏捷开发"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#敏捷开发"}},[v._v("#")]),v._v(" 敏捷开发")])])}),[],!1,null,null,null);_.default=t.exports}}]);